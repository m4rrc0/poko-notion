---
// import Debug from 'astro/debug';
import deepmerge from 'deepmerge';
import { visitParents } from "unist-util-visit-parents";
// import { store, populateStore } from '@services/notionOne.js'
import { notionHelpers, deepMergePropsSelf, deepMergePropsAllPages } from "@utils";
import * as layouts from '@layouts'
import pokoComponents from '../components/components.jsx'
import { toMdx, transformJsonld } from '@services/notion.mjs'
import poko from '@poko'

// import { renderImg } from "astro-imagetools/api";

const {
  MDXPage,
  // AstroPage
} = layouts

export async function getStaticPaths() {
  // const filePath = "src/_data/poko.json";
  // const systemPath = `${process.cwd()}/${filePath}`;

  // const _userAssets = await Astro.glob('../_data/user-assets/*.(jpeg|png|webp|gif|avif|tiff|svg|JPEG|PNG|WebP|GIF|AVIF|TIFF|SVG)');
  // const userAssets = await Promise.all(_userAssets?.map(async (a) => {
    //   console.log({ a })
  //   const { link, style, img } = await renderImg({
    //     src: a.default,
  //     alt: 'something'
  //   });
  //   console.log({link, style, img})
  //   return a
  // }))
  // console.log({ userAssets })

  // const poko = await import(systemPath)
  const { settings: _settings, pages: _pages, collections, files: _files, paths, websiteTree } = poko

  const _userAssets = await Astro.glob('../_data/user-assets/*.(jpeg|jpg|png|webp|gif|avif|tiff|JPEG|JPG|PNG|WebP|GIF|AVIF|TIFF)');
  const userAssets = _userAssets?.map(a => a.default)
  const files = _files.map(f => {
    const name = f.filename.replace(f.extension, '')
    const src = userAssets.find(a => a.match(`${name}@`))
    return {...f, src}
  })

  // TODO: loop recursively on tree instead of computing parent pages multiple times

  const { MDXContent: MDXContentSettings, exports: exportsSettings } = await toMdx(_settings.data.md)
  const propsSettings = deepMergePropsSelf([{..._settings.data.props}, exportsSettings])
  const settings = { ..._settings, data: { ..._settings.data, MDXContent: MDXContentSettings, props: propsSettings } }

  const pages = await Promise.all(_pages.map(async p => {
    const { MDXContent, exports: exportsPage } = await toMdx(p.data.md)
    const propsPage = deepMergePropsSelf([{...p.data?.props}, exportsPage])
    // Don't do this map if you want only the exports of the curent page (not inherit from parent pages and settings)
    const propsParents = await Promise.all(p?.parents?.map(async parent => {
      const { exports: exportsParent } = await toMdx(parent.data.md)
      const propsParent = deepMergePropsSelf([{...parent.data?.props}, exportsParent])
      return propsParent
    })) || []
    // console.log([...propsParents, propsPage])

    const props = deepMergePropsAllPages([...propsParents, propsPage])
    return { ...p, data: { ...p.data, MDXContent, props } }
  }))

  return pages.filter(page => page.data.props.status !== 'draft').map(page => {

    return { params: { path: page.data.path === '' ? undefined : page.data.path }, props: { settings, collections, pages, page, files, paths, websiteTree } }
  })

  // return [{ params: { path: undefined }, props: {  } }]
}


const { settings, collections, pages, page, files, paths, websiteTree } = Astro.props;
const markdownRenderer = page?.data?.props?.markdownRenderer?.toLowerCase() || 'mdx'
const _jsonld = page?.data?.props?.jsonld
let jsonld = typeof _jsonld === "object" ? transformJsonld(_jsonld) : _jsonld

const ldString = jsonld ? JSON.stringify(jsonld) : ""


// const posts = await Astro.glob('./*.mdx');
// const posts = await Astro.glob('../**/*.mdx')
// console.log(posts)
// console.log(Astro.props.page.data.MDXContent)
// {posts.map(post => <p>{post.title}</p>)}
// const Content = Astro.props.page.data.MDXContent
---

<!-- {markdownRenderer === 'astro' && <AstroPage  {...Astro.props} />} -->

{markdownRenderer === 'mdx' && <MDXPage  {...Astro.props} />}
{ldString ? <script type="application/ld+json" set:html={ldString}></script> : null}

<!-- <div>hello</div> -->
